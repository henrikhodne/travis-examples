h1. Travis Ruby Client - "!https://secure.travis-ci.org/travis-ci/travis-ruby-client.png?branch=master!":http://travis-ci.org/travis-ci/travis-ruby-client "!https://gemnasium.com/travis-ci/travis-ruby-client.png!":https://gemnasium.com/travis-ci/travis-ruby-client

h2. Contact
* "Github":http://github.com/travis-ci/travis-ruby-client
* "Twitter":http://twitter.com/travisci
* "IRC":irc://irc.freenode.net#travis
* "Mailinglist":http://groups.google.com/group/travis-ci

h2. Documentation

* "YARD docs":http://rdoc.info/github/travis-ci/travis-ruby-client/master/file/README.textile

h2. Installation

<pre>
  gem install travis-client
</pre>

h2. Usage [As a Command Line Tool]

<pre>
Supported Commands:
    travis repositories|repos|repo|r {options}
    travis status|stat|s {options}

Repositories:
    travis status|stat|s
    travis repositories|repos|repo|r [--recent]
    travis repositories --slugs={repository_slug}[,{repository_slug}[,...]]
    travis repositories --name={repository_name} --owner={owner_name}
    travis repositories --slug={repository_slug}
    travis repositories --builds
    travis repositories --name={repository_name} --owner={owner_name} --build_id={build_id}
    travis repositories --slug={repository_slug} --build_id={build_id}

Supported Options:
    --recent                         lists the recent processed repositories.
    -B, --builds                     lists the recent builds for a repository.
    -o, --owner=                     sets the target repository owner's name.
    -n, --name=                      sets the target repository name.
    -s, --slug=                      sets the target repositorys slug.
    -S, --slugs=                     sets the target repositories slugs (comma separated).
    -b, --build_id=                  sets the target repository build id.
    -h, -H, --help                   display this help message.
</pre>

The `status` command should be run from your project directory. It will try to identify and dispaly the Travis status of the target repository based on the current directory remote git urls.

h2. Usage [As a Ruby Library]

h3. Fetching Repositories

<pre>
Travis::API::Client::Repositories.all #Collection of Repository instances

Travis::API::Client::Repositories.all! #Collection of Repository instances bypassing cache

Travis::API::Client::Repositories.owner('owner_name_here').name('name_here').fetch #Repository

Travis::API::Client::Repositories.owner('owner_name_here').name('name_here').fetch! #Repository bypassing cache

Travis::API::Client::Repositories.slug('owner_name_here/name_here').fetch #Repository

Travis::API::Client::Repositories.slug('owner_name_here/name_here').fetch! #Repository bypassing cache
</pre>

h3. Fetching Builds

<pre>
Travis::API::Client::Repositories.owner('owner_name_here').name('name_here').builds #Collection of Build instances 

Travis::API::Client::Repositories.owner('owner_name_here').name('name_here').builds! #Collection of Build instances bypassing cache

Travis::API::Client::Repositories.slug('owner_name_here/name_here').builds #Collection of Build instances

Travis::API::Client::Repositories.slug('owner_name_here/name_here').builds! #Collection of Build instances bypassing cache

Travis::API::Client::Repositories.owner('owner_name_here').name('name_here').build('id_here') #Build

Travis::API::Client::Repositories.owner('owner_name_here').name('name_here').build!('id_here') #Build bypassing cache

Travis::API::Client::Repositories.slug('owner_name_here/name_here').build('id_here') #Build

Travis::API::Client::Repositories.slug('owner_name_here/name_here').build!('id_here') #Build bypassing cache
</pre>

h3. Repository methods

The main attributes from the API will be accessible via the following methods:

bc. [:slug, :id, :status, :last_build_id, :last_build_status, :last_build_number, :last_build_finished_at]

Some relationships can be retrieved using the following methods:

bc. repository.builds #=> Collection of Build instances
repository.last_build #=> Build

You can also update the repository information from the API usign:

bc. repository.reload! #=> Fetch the updated repository data from the API and updates its attributes and relationships

h3. Build methods

The main attributes from the API will be accessible via the following methods:

bc. [:number, :commited_at, :commit, :finished_at, :config, :author_name, :log, :branch, :id, :parent_id, :started_at, :author_email, :status, :repository_id, :message, :compare_url]

Some relationships can be retrieved using the following methods:

bc. build.parent #=> Build or nil
build.repository #=> Repository
build.matrix #=> Collection of Build instances or nil
    
You can also update the build information from the API usign:

bc. build.reload! #=> Fetch the updated build data from the API and updates its attributes and relationships

